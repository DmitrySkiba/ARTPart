/*
 * Copyright (C) 2015 Dmitry Skiba
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

compileJava {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    options.fork = true
    options.incremental = true

    options.bootClasspath = file('<no bootclasspath>')

    options.forkOptions.executable = 'javac'
}

sourceSets {
    main {
        resources {
            def excludedFiles = [
                'package.html',
                'overview.html',
                '.*.swp',
                '.DS_Store',
                '*~'
            ]
            exclude excludedFiles.collect { "**/$it" }
        }
    }
}

jar.ext.finalizeIntermediate = { finalizeAction ->
    jar {
        def oldClassifier

        doFirst {
            // Temporarily change properties to produce 'intermediate' file,
            // set 'jar.intermediateArchivePath'
            oldClassifier = jar.classifier
            jar.classifier = (oldClassifier ?: "") + "(INTERMEDIATE)"
            jar.ext.intermediateArchivePath = jar.archivePath
        }

        doLast {
            // Restore properties
            jar.classifier = oldClassifier

            // Run 'finalizeAction' which is expected to take 'jar.intermediateArchivePath'
            // and produce 'jar.archivePath' (by obfuscating, applying jarjar, etc.)
            finalizeAction()
        }
    }
}
